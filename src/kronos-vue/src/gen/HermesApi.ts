// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "HermesApi.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GetTokenRequest
 */
export interface GetTokenRequest {
    /**
     * @generated from protobuf field: CredentialsType CredentialsType = 1 [json_name = "CredentialsType"];
     */
    credentialsType: CredentialsType;
    /**
     * @generated from protobuf field: string DeviceId = 2 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string Username = 3 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: string Password = 4 [json_name = "Password"];
     */
    password: string;
    /**
     * @generated from protobuf field: repeated string RequestedScopes = 5 [json_name = "RequestedScopes"];
     */
    requestedScopes: string[];
}
/**
 * @generated from protobuf message GetTokenResponse
 */
export interface GetTokenResponse {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string AccessToken = 2 [json_name = "AccessToken"];
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string Username = 3 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: repeated string Scopes = 4 [json_name = "Scopes"];
     */
    scopes: string[];
}
/**
 * @generated from protobuf enum CredentialsType
 */
export enum CredentialsType {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: DeviceId = 1;
     */
    DeviceId = 1,
    /**
     * @generated from protobuf enum value: Password = 2;
     */
    Password = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GetTokenRequest$Type extends MessageType<GetTokenRequest> {
    constructor() {
        super("GetTokenRequest", [
            { no: 1, name: "CredentialsType", kind: "enum", jsonName: "CredentialsType", T: () => ["CredentialsType", CredentialsType] },
            { no: 2, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Password", kind: "scalar", jsonName: "Password", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "RequestedScopes", kind: "scalar", jsonName: "RequestedScopes", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTokenRequest>): GetTokenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.credentialsType = 0;
        message.deviceId = "";
        message.username = "";
        message.password = "";
        message.requestedScopes = [];
        if (value !== undefined)
            reflectionMergePartial<GetTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTokenRequest): GetTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CredentialsType CredentialsType = 1 [json_name = "CredentialsType"];*/ 1:
                    message.credentialsType = reader.int32();
                    break;
                case /* string DeviceId = 2 [json_name = "DeviceId"];*/ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string Username = 3 [json_name = "Username"];*/ 3:
                    message.username = reader.string();
                    break;
                case /* string Password = 4 [json_name = "Password"];*/ 4:
                    message.password = reader.string();
                    break;
                case /* repeated string RequestedScopes = 5 [json_name = "RequestedScopes"];*/ 5:
                    message.requestedScopes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CredentialsType CredentialsType = 1 [json_name = "CredentialsType"]; */
        if (message.credentialsType !== 0)
            writer.tag(1, WireType.Varint).int32(message.credentialsType);
        /* string DeviceId = 2 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string Username = 3 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        /* string Password = 4 [json_name = "Password"]; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* repeated string RequestedScopes = 5 [json_name = "RequestedScopes"]; */
        for (let i = 0; i < message.requestedScopes.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.requestedScopes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTokenRequest
 */
export const GetTokenRequest = new GetTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTokenResponse$Type extends MessageType<GetTokenResponse> {
    constructor() {
        super("GetTokenResponse", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AccessToken", kind: "scalar", jsonName: "AccessToken", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Scopes", kind: "scalar", jsonName: "Scopes", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTokenResponse>): GetTokenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.accessToken = "";
        message.username = "";
        message.scopes = [];
        if (value !== undefined)
            reflectionMergePartial<GetTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTokenResponse): GetTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string AccessToken = 2 [json_name = "AccessToken"];*/ 2:
                    message.accessToken = reader.string();
                    break;
                case /* string Username = 3 [json_name = "Username"];*/ 3:
                    message.username = reader.string();
                    break;
                case /* repeated string Scopes = 4 [json_name = "Scopes"];*/ 4:
                    message.scopes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string AccessToken = 2 [json_name = "AccessToken"]; */
        if (message.accessToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessToken);
        /* string Username = 3 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        /* repeated string Scopes = 4 [json_name = "Scopes"]; */
        for (let i = 0; i < message.scopes.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.scopes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTokenResponse
 */
export const GetTokenResponse = new GetTokenResponse$Type();
/**
 * @generated ServiceType for protobuf service HermesApiGrpc
 */
export const HermesApiGrpc = new ServiceType("HermesApiGrpc", [
    { name: "GetToken", options: {}, I: GetTokenRequest, O: GetTokenResponse }
]);
