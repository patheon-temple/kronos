// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "AthenaApi.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AthenaApiGrpc } from "./AthenaApi";
import type { VerifyPasswordResponse } from "./AthenaApi";
import type { VerifyPasswordRequest } from "./AthenaApi";
import type { DoesUsernameExistResponse } from "./AthenaApi";
import type { DoesUsernameExistRequest } from "./AthenaApi";
import type { GetUserByUsernameRequest } from "./AthenaApi";
import type { GetUserByIdRequest } from "./AthenaApi";
import type { GetUserByDeviceIdRequest } from "./AthenaApi";
import type { CreateUserFromUsernameRequest } from "./AthenaApi";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PantheonIdentity } from "./AthenaCommon";
import type { CreateUserFromDeviceIdRequest } from "./AthenaApi";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service AthenaApiGrpc
 */
export interface IAthenaApiGrpcClient {
    /**
     * @generated from protobuf rpc: CreateUserFromDeviceId(CreateUserFromDeviceIdRequest) returns (PantheonIdentity);
     */
    createUserFromDeviceId(input: CreateUserFromDeviceIdRequest, options?: RpcOptions): UnaryCall<CreateUserFromDeviceIdRequest, PantheonIdentity>;
    /**
     * @generated from protobuf rpc: CreateUserFromUsername(CreateUserFromUsernameRequest) returns (PantheonIdentity);
     */
    createUserFromUsername(input: CreateUserFromUsernameRequest, options?: RpcOptions): UnaryCall<CreateUserFromUsernameRequest, PantheonIdentity>;
    /**
     * @generated from protobuf rpc: GetUserByDeviceId(GetUserByDeviceIdRequest) returns (PantheonIdentity);
     */
    getUserByDeviceId(input: GetUserByDeviceIdRequest, options?: RpcOptions): UnaryCall<GetUserByDeviceIdRequest, PantheonIdentity>;
    /**
     * @generated from protobuf rpc: GetUserById(GetUserByIdRequest) returns (PantheonIdentity);
     */
    getUserById(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, PantheonIdentity>;
    /**
     * @generated from protobuf rpc: GetUserByUsername(GetUserByUsernameRequest) returns (PantheonIdentity);
     */
    getUserByUsername(input: GetUserByUsernameRequest, options?: RpcOptions): UnaryCall<GetUserByUsernameRequest, PantheonIdentity>;
    /**
     * @generated from protobuf rpc: DoesUsernameExist(DoesUsernameExistRequest) returns (DoesUsernameExistResponse);
     */
    doesUsernameExist(input: DoesUsernameExistRequest, options?: RpcOptions): UnaryCall<DoesUsernameExistRequest, DoesUsernameExistResponse>;
    /**
     * @generated from protobuf rpc: VerifyPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse);
     */
    verifyPassword(input: VerifyPasswordRequest, options?: RpcOptions): UnaryCall<VerifyPasswordRequest, VerifyPasswordResponse>;
}
/**
 * @generated from protobuf service AthenaApiGrpc
 */
export class AthenaApiGrpcClient implements IAthenaApiGrpcClient, ServiceInfo {
    typeName = AthenaApiGrpc.typeName;
    methods = AthenaApiGrpc.methods;
    options = AthenaApiGrpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateUserFromDeviceId(CreateUserFromDeviceIdRequest) returns (PantheonIdentity);
     */
    createUserFromDeviceId(input: CreateUserFromDeviceIdRequest, options?: RpcOptions): UnaryCall<CreateUserFromDeviceIdRequest, PantheonIdentity> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserFromDeviceIdRequest, PantheonIdentity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUserFromUsername(CreateUserFromUsernameRequest) returns (PantheonIdentity);
     */
    createUserFromUsername(input: CreateUserFromUsernameRequest, options?: RpcOptions): UnaryCall<CreateUserFromUsernameRequest, PantheonIdentity> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserFromUsernameRequest, PantheonIdentity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserByDeviceId(GetUserByDeviceIdRequest) returns (PantheonIdentity);
     */
    getUserByDeviceId(input: GetUserByDeviceIdRequest, options?: RpcOptions): UnaryCall<GetUserByDeviceIdRequest, PantheonIdentity> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByDeviceIdRequest, PantheonIdentity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserById(GetUserByIdRequest) returns (PantheonIdentity);
     */
    getUserById(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, PantheonIdentity> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByIdRequest, PantheonIdentity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserByUsername(GetUserByUsernameRequest) returns (PantheonIdentity);
     */
    getUserByUsername(input: GetUserByUsernameRequest, options?: RpcOptions): UnaryCall<GetUserByUsernameRequest, PantheonIdentity> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByUsernameRequest, PantheonIdentity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DoesUsernameExist(DoesUsernameExistRequest) returns (DoesUsernameExistResponse);
     */
    doesUsernameExist(input: DoesUsernameExistRequest, options?: RpcOptions): UnaryCall<DoesUsernameExistRequest, DoesUsernameExistResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DoesUsernameExistRequest, DoesUsernameExistResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifyPassword(VerifyPasswordRequest) returns (VerifyPasswordResponse);
     */
    verifyPassword(input: VerifyPasswordRequest, options?: RpcOptions): UnaryCall<VerifyPasswordRequest, VerifyPasswordResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifyPasswordRequest, VerifyPasswordResponse>("unary", this._transport, method, opt, input);
    }
}
