// <auto-generated />
using System;
using Kronos.WebAPI.Athena.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kronos.WebAPI.Migrations.Athena
{
    [DbContext(typeof(AthenaDbContext))]
    [Migration("20241115103112_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("athena")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.ServiceAccountDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("AuthorizationCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("ServiceAccounts", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.ServiceAccountScopeDataModel", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopesId")
                        .HasColumnType("text");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "ScopesId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ServicesScopes", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.ServiceScopeDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceScopes", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.UserAccountDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.UserAccountScopeDataModel", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopesId")
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("AccountsId", "ScopesId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ScopesId");

                    b.ToTable("UsersScopes", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.UserScopeDataModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("UserScopes", "athena");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.ServiceAccountScopeDataModel", b =>
                {
                    b.HasOne("Kronos.WebAPI.Athena.Data.ServiceAccountDataModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.ServiceAccountDataModel", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.ServiceScopeDataModel", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.ServiceScopeDataModel", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Kronos.WebAPI.Athena.Data.UserAccountScopeDataModel", b =>
                {
                    b.HasOne("Kronos.WebAPI.Athena.Data.UserAccountDataModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.UserAccountDataModel", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.UserScopeDataModel", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kronos.WebAPI.Athena.Data.UserScopeDataModel", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Scope");
                });
#pragma warning restore 612, 618
        }
    }
}
